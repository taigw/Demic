[dataset]
# filename of tfrecords
# (required, string)
data_train = [D:/Documents/data/JSRT/train.tfrecords]

data_valid0 = [D:/Documents/data/JSRT/valid.tfrecords]

[sampler]
# batch size to load
# (optional, integer, default is 5)
batch_size  = 2

# patch shape [D, H, W, C]
# (required, list)
data_shape  = [1, 192, 192, 1]
weight_shape= [1, 192, 192, 1]
label_shape = [1, 192, 192, 1]

# whether load ground truth or not
# (optional, bool, default is False)
with_ground_truth = True

# data augmentation
# a list with angles in radians, e.g. [-3.14, 3.14]
# (optional, list of float, default is None)
random_rotate = 

# a bool denoting left right flip or not
# (optional, bool, default is False)
flip_left_right = True

# a bool denoting up down flip or not
# (optional, bool, default is False)
flip_up_down = False

# two lists of label convert, each label in label_convert_source is converted to the corresponding one in label_convert_target, used for segmentation task
# (optional, list, default is None)
label_convert_source = [0, 1, 255]
label_convert_target = [0, 1, 1]

# patch sampling mode
# 0: for segmentation, randomly sample patch with fixed size,
# 1: for segmentation, crop with bounding box and resize within plane,
#    and randomly sample along z axis
# 2: for regression, resize image to fixed size,
#    resize 2d images to given size, and get spatial transformer parameters
# (required, integer)
patch_mode = 0

# bounding box margin for along z,y,x axis. (when patch_mode = 1 or 2)
# (optional, list of integers, default is [0,0,0])
bounding_box_margin = [5,20,20]

[network]
# type of network
# (required, string)
net_type = UNet2D

# name of network
# (required, string)
net_name = unet

# bn_training, True: use batch mean False: use moving mean
# (optional, bool, default: True)
bn_training = True

# number of class, required for segmentation task
# (optional, integer)
class_num = 2

[network_parameter]

[training]
# application type, 0 segmentation, 1 regression
# (required, integer)
app_type = 0

# loss function: dice, cross_entropy, multi_scale_dice
loss_function = dice

# seed of random number, an integer
# (optional, integer, default is 0)
random_seed = 0

# start epoch
# (required, integer)
start_iter = 0

# maximal epoch
# (required, integer)
maximal_iter = 1000

# snapshot epoch
# (required, integer)
snapshot_iter = 1000

# pertained model, used for fine-tuning, required if start_epoch > 0
# (optional, string, default is None)
pretrained_model = 

# model_save_prefix
# (required, string)
model_save_prefix = D:/Documents/data/JSRT/model/unet

test_interval = 10
display_interval = 100

# learning rate
# (optional, float, default is 1e-3)
learning_rate = 1e-3

# weight decay
# (optional, float, default is 1e-7)
decay = 1e-7
